clear()
quir()
quit()
c(1,2,3,4,5)
x<-c(1:25)
x
rev?
.
rev ?
l
help rev
help reverse
reverse ?
.
help.search("reverse")
rev(c)
c
x
rev(x)
(.packages())
help("read.lines")
??read.lines
??readLines
?read.table
??read.table
exit()
quit()
source("/Volumes/DiskStation/Data Science/MyFunctions/persUtils.R")
source("smb://DiskStation/Data Science/MyFunctions/persUtils.R")
listObjects <- function(act="init") {
if(act=="init") {
print(act)
if (exists("myMatrix")) {
print("Found it")
print(environment())
}
else {
myMatrix <<- matrix(1:12, 3,4,  dimnames=list(c("r1","r2","r3"), c("c1","c2","c3","c4")))
print("Did not find it...")
}
}
else if (act=="set")
myMatrix <<- myMatrix * 2
}
ls()
x
rm("x")
ls()
listObjects()
myMatrix
ls()
listObjects()
myMatrix
listObjects("set")
myMatrix
myMatrix
solve(myMatrix)
??solve()
q()
makeCacheMatrix <- function(x = matrix()) {
if (!exists("cachedMatrix"))
print("Not found")
cachedMatrix <<- x
else if (cachedMatrix == x)
print("Matrices are equal")
else print ("Marices are not equal")
# get <- function() cachedMatrix
# computeInverse <- function() {
}
}
makeCacheMatrix <- function(x = matrix()) {
if (!exists("cachedMatrix"))
print("Not found")
cachedMatrix <<- x
else if (cachedMatrix == x)
print("Matrices are equal")
else print ("Marices are not equal")
# get <- function() cachedMatrix
# computeInverse <- function() {
}
makeCacheMatrix <- function(x = matrix()) {
if (!exists("cachedMatrix"))
print("Not found")
cachedMatrix <<- x
else if (cachedMatrix == x)
print ("Matrices are equal")
else
print ("Marices are not equal")
# get <- function() cachedMatrix
# computeInverse <- function() {
}
makeCacheMatrix <- function(x = matrix()) {
if (!exists("cachedMatrix"))
print("Not found")
cachedMatrix <<- x
else if (cachedMatrix == x)
print ("Matrices are equal")
else
print ("Matrices are not equal")
# get <- function() cachedMatrix
# computeInverse <- function() {
}
setwd("~/Documents/DataScienceCoursera")
source("~/Documents/RProgramming/persUtils.R")
makeCacheMatrix <- function(x = matrix()) {
if (!exists("cachedMatrix")) {
print("Not found")
cachedMatrix <<- x
}
else if (cachedMatrix == x)
print ("Matrices are equal")
else
print ("Matrices are not equal")
# get <- function() cachedMatrix
# computeInverse <- function() {
}
makeCacheMatrix()
cachedMatrix
makeCacheMatrix$cachedMatrix
makeCachedMatrix()
makeCacheMatrix()
tst<-matrix(1:4, 2,2)
tst
tst==matrix(1:4,2,2)
??is.equal()
identical(tst,matrix(1:4,2,2))
identical(tst,matrix(c(1,2,3,5),2,2))
makeCacheMatrix <- function(x = matrix()) {
if (!exists("cachedMatrix")) {
print("Not found")
cachedMatrix <<- x
}
else if (identical(cachedMatrix,x)==TRUE)
print ("Matrices are equal")
else
print ("Matrices are not equal")
# get <- function() cachedMatrix
# computeInverse <- function() {
}
ls()
rm("cachedMatrix","myMatrix","tst")
ls()
makeCacheMatrix()
ls()
cachedMatrix
makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
if (!exists("cachedMatrix")) {
print("Not found")
cacheMatrix <- function (matrixToCache) cachedMatrix << - x
}
else if (identical(cachedMatrix,x)==TRUE) {
print ("Matrices are equal")
getMatrix <- function () cacheMatrix
}
else
print ("Matrices are not equal")
list (cacheMatrix = cacheMatrix, getMatrix = getMatrix)
# computeInverse <- function() {
}
makeCacheMatrix <- function(x = matrix()) {
if (!exists("cachedMatrix")) {
print("Not found")
cacheMatrix <- function (matrixToCache) cachedMatrix << - x
}
else if (identical(cachedMatrix,x)==TRUE) {
print ("Matrices are equal")
getMatrix <- function () cacheMatrix
}
else
print ("Matrices are not equal")
list (cacheMatrix = cacheMatrix, getMatrix = getMatrix)
# computeInverse <- function() {
}
makeCacheMatrix <- function(cacheMatrix = matrix()) {
if (!exists("cachedMatrix")) {
print("Not found")
cacheMatrix <- function (matrixToCache) cachedMatrix << - x
}
else if (identical(cachedMatrix,x)==TRUE) {
print ("Matrices are equal")
getMatrix <- function () cacheMatrix
}
else
print ("Matrices are not equal")
list (cacheMatrix = cacheMatrix, getMatrix = getMatrix)
# computeInverse <- function() {
}
makeCacheMatrix <- function(cacheMatrix = matrix()) {
if (!exists("cachedMatrix")) {
print("Not found")
cacheMatrix <- function (matrixToCache) cachedMatrix <<- x
}
else if (identical(cachedMatrix,x)==TRUE) {
print ("Matrices are equal")
getMatrix <- function () cacheMatrix
}
else
print ("Matrices are not equal")
list (cacheMatrix = cacheMatrix, getMatrix = getMatrix)
# computeInverse <- function() {
}
makeCacheMatrix()
makeCacheMatrix <- function(cacheMatrix = matrix()) {
if (!exists("cachedMatrix")) {
print("Not found")
cacheMatrix <- function (matrixToCache) cachedMatrix <<- x
}
else if (identical(cachedMatrix,cacheMatrix)==TRUE) {
print ("Matrices are equal")
getMatrix <- function () cacheMatrix
}
else
print ("Matrices are not equal")
list (cacheMatrix = cacheMatrix, getMatrix = getMatrix)
# computeInverse <- function() {
}
makeCacheMatrix()
makeCacheMatrix$getMatrix
ls()
cachedMatrix
class(getMatrix)
makeCacheMatrix(c(1,4,2,9),2,2,dimnames=list(c(1,2),c(3,4)))
makeCacheMatrix(matrix((1,4,2,9),2,2,dimnames=list(c(1,2),c(3,4))))
makeCacheMatrix(matrix(c(1,4,2,9), 2, 2, dimnames=list(c(1,2),c(3,4))))
makeCacheMatrix$cacheMatrix
makeCacheMatrix$cacheMatrix()
makeCacheMatri$getMatrix()
makeCacheMatrix$getMatrix()
makeCacheMatrix <- function(cacheMatrix = matrix()) {
plcHldr <- NULL
if (!exists("cachedMatrix")) {
print("Not found")
cacheMatrix <- function (matrixToCache) {
cachedMatrix <<- x
plcHldr <<- NULL
}
else if (identical(cachedMatrix,cacheMatrix)==TRUE) {
print ("Matrices are equal")
getMatrix <- function () cacheMatrix
}
else
print ("Matrices are not equal")
list (cacheMatrix = cacheMatrix, getMatrix = getMatrix)
# computeInverse <- function() {
}
makeCacheMatrix <- function(cacheMatrix = matrix()) {
plcHldr <- NULL
if (!exists("cachedMatrix")) {
print("Not found")
cacheMatrix <- function (matrixToCache) {
cachedMatrix <<- x
plcHldr <<- NULL
}
}
else if (identical(cachedMatrix,cacheMatrix)==TRUE) {
print ("Matrices are equal")
getMatrix <- function () cacheMatrix
}
else
print ("Matrices are not equal")
list (cacheMatrix = cacheMatrix, getMatrix = getMatrix)
# computeInverse <- function() {
}
makecacheMatrix()
makeCacheMatrix()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector()
makeVector$get()
makeVector$get
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
ls()
makeVector(5)
cachemean(5)
ls()
makeVector()
makeVector$getmean
makeVendor$getmean()
makeVector$getmean()
tstFunction <- function() {
i<-0
function() {
i<<-i+1
}
}
tstFunction1<-tstFunction()
tstFunction <- function() {
i<-0
function() {
i<<-i+1
i
}
}
tstFunction1<-tstFunction()
ls()
tstFunction1
tstFunction <- function() {
i<-0
function() {
i<<-i+1
}
i
}
tstFunction()
tstFunction()
tstFuncationn1<-tstFunction()
tstFUncationn1
tstFuncationn1
tstFuncationn1<-tstFunction()
tstFuncationn1
ls()
